#openapi: 3.0.1
#info:
#  title: Spring Education API
#  description: Spring Education API Sample Application.
#  license:
#    name: Apache 2.0
#    url: http://www.apache.org/licenses/LICENSE-2.0
#  version: '1.0'
#servers:
#  - url: http://localhost:8090/petclinic/api
#tags:
#  - name: failing
#    description: Endpoint which always returns an error.
#  - name: student
#    description: Endpoints related to students.
#  - name: teacher
#    description: Endpoints related to student.
#  - name: course
#    description: Endpoints related to courses.
#paths:
#  /oops:
#    get:
#      tags:
#        - failing
#      operationId: failingRequest
#      summary: Always fails
#      description: Produces sample error response.
#      responses:
#        200:
#          description: Never returned.
#          headers:
#            ETag:
#              description: An ID for this version of the response.
#              schema:
#                type: string
#          content:
#            text/plain:
#              schema:
#                type: string
#        304:
#          description: Not modified.
#          headers:
#            ETag:
#              description: An ID for this version of the response.
#              schema:
#                type: string
#        400:
#          description: Bad request.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#  /scrum:
#    post:
#      tags:
#        - scrum
#      operationId: create SCRUM
#      summary: create a SCRUM
#      description: Records the details of a new scrum.
#      requestBody:
#        description: The scrum
#        content:
#          application/json:
#            schema:
#            #  $ref: '#/components/schemas/OwnerFields'
#        required: true
#      responses:
#        201:
#          description: The scrum was sucessfully created.
#          content:
#            application/json:
#              schema:
#              #   $ref: '#/components/schemas/Owner'
#        400:
#          description: Bad request.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#        500:
#          description: Server error.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#    get:
#      tags:
#        - scrum
#      operationId: listScrum
#      summary: Lists pet scrums
#      description: Returns an array of pet scrums.
#      parameters:
#        - name: lastName
#          in: query
#          description: Last name.
#          required: false
#          schema:
#            type: string
#            example: Davis
#      responses:
#        200:
#          description: Owner details found and returned.
#          headers:
#            ETag:
#              description: An ID for this version of the response.
#              schema:
#                type: string
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                #  $ref: '#/components/schemas/Owner'
#        304:
#          description: Not modified.
#          headers:
#            ETag:
#              description: An ID for this version of the response.
#              schema:
#                type: string
#        500:
#          description: Server error.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#  /tasks/:
#    get:
#      tags:
#        - task
#      operationId: getTask
#      summary: Get a pet Task by ID
#      description: Returns the pet owner or a 404 error.
#      parameters:
#        - name: ownerId
#          in: path
#          description: The ID of the pet owner.
#          required: true
#          schema:
#            type: integer
#            format: int32
#            minimum: 0
#            example: 1
#      responses:
#        200:
#          description: Owner details found and returned.
#          headers:
#            ETag:
#              description: An ID for this version of the response.
#              schema:
#                type: string
#          content:
#            application/json:
#              schema:
#              #  $ref: '#/components/schemas/Owner'
#        304:
#          description: Not modified.
#          headers:
#            ETag:
#              description: An ID for this version of the response.
#              schema:
#                type: string
#        400:
#          description: Bad request.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#        404:
#          description: Owner not found.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#        500:
#          description: Server error.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#    put:
#      tags:
#        - owner
#      operationId: updateOwner
#      summary: Update a pet owner's details
#      description: Updates the pet owner record with the specified details.
#      parameters:
#        - name: ownerId
#          in: path
#          description: The ID of the pet owner.
#          required: true
#          schema:
#            type: integer
#            format: int32
#            minimum: 0
#            example: 1
#      requestBody:
#        description: The pet owner details to use for the update.
#        content:
#          application/json:
#            schema:
#            # $ref: '#/components/schemas/OwnerFields'
#        required: true
#      responses:
#        200:
#          description: Update successful.
#          content:
#            application/json:
#              schema:
#              # $ref: '#/components/schemas/Owner'
#        400:
#          description: Bad request.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#        404:
#          description: Owner not found.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#        500:
#          description: Server error.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#
#    delete:
#      tags:
#        - owner
#      operationId: deleteOwner
#      summary: Delete an owner by ID
#      description: Returns the owner or a 404 error.
#      parameters:
#        - name: ownerId
#          in: path
#          description: The ID of the owner.
#          required: true
#          schema:
#            type: integer
#            format: int32
#            minimum: 0
#            example: 1
#      responses:
#        200:
#          description: Owner details found and returned.
#          headers:
#            ETag:
#              description: An ID for this version of the response.
#              schema:
#                type: string
#          content:
#            application/json:
#              schema:
#              # $ref: '#/components/schemas/Owner'
#        304:
#          description: Not modified.
#          headers:
#            ETag:
#              description: An ID for this version of the response.
#              schema:
#                type: string
#        400:
#          description: Bad request.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#        404:
#          description: Owner  not found.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#        500:
#          description: Server error.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RestError'
#
#components:
#  schemas:
#    RestError:
#      title: REST Error
#      description: The schema for all error responses.
#      type: object
#      properties:
#        status:
#          title: Status
#          description: The HTTP status code.
#          type: integer
#          format: int32
#          example: 400
#          readOnly: true
#        error:
#          title: Error
#          description: The short error message.
#          type: string
#          example: Bad Request
#          readOnly: true
#        path:
#          title: Path
#          description: The path of the URL for this request.
#          type: string
#          format: uri
#          example: '/api/owners'
#          readOnly: true
#        timestamp:
#          title: Timestamp
#          description: The time the error occured.
#          type: string
#          format: date-time
#          example: '2019-08-21T21:41:46.158+0000'
#          readOnly: true
#        message:
#          title: Message
#          description: The long error message.
#          type: string
#          example: 'Request failed schema validation'
#          readOnly: true
#        schemaValidationErrors:
#          title: Schema validation errors
#          description: Validation errors against the OpenAPI schema.
#          type: array
#          items:
#            $ref: '#/components/schemas/ValidationMessage'
#        trace:
#          title: Trace
#          description: The stacktrace for this error.
#          type: string
#          example: 'com.atlassian.oai.validator.springmvc.InvalidRequestException: ...'
#          readOnly: true
#      required:
#        - status
#        - error
#        - path
#        - timestamp
#        - message
#        - schemaValidationErrors
#    ValidationMessage:
#      title: Validation message
#      description: Messages describing a validation error.
#      type: object
#      properties:
#        message:
#          title: Message
#          description: The valiation message.
#          type: string
#          example: "[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: [\"string\"])"
#          readOnly: true
#      required:
#        - message
#      additionalProperties: true
#    OwnerFields:
#    title: Owner fields
#    description: Editable fields of a pet owner.
#    type: object
#    properties:
#      firstName:
#        title: First name
#        description: The first name of the pet owner.
#        type: string
#        minLength: 1
#        maxLength: 30
#        pattern: '^[a-zA-Z]*$'
#        example: George
#      lastName:
#        title: Last name
#        description: The last name of the pet owner.
#        type: string
#        minLength: 1
#        maxLength: 30
#        pattern: '^[a-zA-Z]*$'
#        example: Franklin
#      address:
#        title: Address
#        description: The postal address of the pet owner.
#        type: string
#        minLength: 1
#        maxLength: 255
#        example: '110 W. Liberty St.'
#      city:
#        title: City
#        description: The city of the pet owner.
#        type: string
#        minLength: 1
#        maxLength: 80
#        example: Madison
#      telephone:
#        title: Telephone number
#        description: The telephone number of the pet owner.
#        type: string
#        minLength: 1
#        maxLength: 20
#        pattern: '^[0-9]*$'
#        example: '6085551023'
#    required:
#      - firstName
#      - lastName
#      - address
#      - city
#      - telephone
#    Owner:
#      title: Owner
#      description: A pet owner.
#      allOf:
#        - $ref: '#/components/schemas/OwnerFields'
#        - type: object
#      properties:
#        id:
#          title: ID
#          description: The ID of the pet owner.
#          type: integer
#          format: int32
#          minimum: 0
#          example: 1
#          readOnly: true
#        pets:
#          title: Pets
#          description: The pets owned by this individual including any booked vet visits.
#          type: array
#          items:
#            $ref: '#/components/schemas/Pet'
#          readOnly: true
#
#
#
#
#
#
#
#
#
